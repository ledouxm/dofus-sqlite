name: Check version and extract data
on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"

permissions:
  contents: write

jobs:
  check-version:
    name: Check Game Version
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.check.outputs.should_release }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install cytrus-v6
        run: npm i -g cytrus-v6

      - name: Get current version
        id: version
        run: echo "version=$(cytrus-v6 version --game dofus --release dofus3)" >> $GITHUB_OUTPUT

      - name: Get latest release
        id: latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_version=$(gh release list -L 1 | cut -f 3 | sed 's/^v//')
          echo "version=${latest_version}" >> $GITHUB_OUTPUT

      - name: Check if new version
        id: check
        run: |
          if [ "${{ steps.version.outputs.version }}" != "${{ steps.latest.outputs.version }}" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  process-and-update:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    name: Extract and Process Game Data
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Cache npm global and pnpm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.APPDATA }}\npm-cache 
            ${{ env.HOME }}/.npm 
            parser/node_modules
            ${{ github.workspace }}/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('parser/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install cytrus-v6
        run: npm i -g cytrus-v6

      - name: Install dependencies
        working-directory: ./parser
        run: pnpm install --frozen-lockfile

      - name: Extract data with cytrus
        working-directory: ./parser
        run: cytrus-v6 download --game dofus --release dofus3 --output temp/ --select **/StreamingAssets/Content/Data/**/*.bundle

      - name: Parse files to JSON
        working-directory: ./parser
        run: pnpm extract
        env:
          INPUT_FOLDER: temp/
          OUTPUT_FOLDER: json/

      - name: Update database
        working-directory: ./parser
        run: pnpm db
        env:
          DATABASE_URL: ./dofus.sqlite
          JSON_FOLDER: json/

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.check-version.outputs.current_version }} \
            --title "Release ${{ needs.check-version.outputs.current_version }}" \
            --notes "Release contains:

            - dofus.sqlite database file
            - Corresponding JSON data files
            
            This release is auto-generated." \
            --draft=false \
            --prerelease=false

      - name: Upload Release Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload v${{ needs.check-version.outputs.current_version }} \
            parser/json/* \
            parser/dofus.sqlite
